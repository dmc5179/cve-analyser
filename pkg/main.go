package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
)

const hydraUrl string = "https://access.redhat.com/hydra/rest/securitydata/cve/"

type Response struct {
	CVE          string `json:"name"`
	Severity     string `json:"threat_severity"`
	Statement    string `json:"statement"`
	Upstream_fix string `json:"upstream_fix"`
	Data_Fixed   []struct {
		Product_name   string `json:"product_name"`
		Advisory       string `json:"advisory"`
		CPE            string `json:"cpe"`
		RPM            string `json:"package"`
		Product_impact string `json:"impact,omitempty"`
	} `json:"affected_release"`
	Data_NotFixed []struct {
		Product_name   string `json:"product_name"`
		Fix_State      string `json:"fix_state"`
		CPE            string `json:"cpe"`
		Product_impact string `json:"impact,omitempty"`
	} `json:"package_state"`
}

func PrettyPrint(i interface{}) string {
	s, _ := json.MarshalIndent(i, "", "\t")
	return string(s)
}

func CallHydra(cve_id string) Response {
	url := hydraUrl + cve_id + ".json"
	// Get request
	resp, err := http.Get(url)
	if err != nil {
		fmt.Println("No response from request")
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body) // response body is []byte

	var result Response
	if err := json.Unmarshal(body, &result); err != nil { // Parse []byte to the go struct pointer
		fmt.Println("Can not unmarshal JSON")
	}
	return result
}

func fileExist(file_name string) bool {
	info, err := os.Stat(file_name)
	if os.IsNotExist(err) {
		return false
	}
	return !info.IsDir()
}

func main() {

	// Verification if provided file with data exist
	if len(os.Args) < 2 {
		fmt.Println("File to check is not provided")
		os.Exit(1)
	}
	file_name := os.Args[1]
	if fileExist(file_name) {
		fmt.Printf("Checking the %v", file_name)
	} else {
		fmt.Println("file to check is incorrect or not exist")
		os.Exit(1)
	}

	// Opening file
	file, err := os.Open(file_name)

	if err != nil {
		fmt.Println("failed opening file")
	}
	defer file.Close()

	reader := bufio.NewScanner(file)
	reader.Split(bufio.ScanLines)
	var lines []string
	for reader.Scan() {
		lines = append(lines, reader.Text())
	}

	// Checking the data
	for _, cve_id := range lines {
		result := CallHydra(cve_id)
		//for _, look := range result.Data_NotFixed {
		//	fmt.Printf("%+v %+v\t", look.Product_name, look.Fix_State)
		//}
		fmt.Println(PrettyPrint(result))
	}

}
