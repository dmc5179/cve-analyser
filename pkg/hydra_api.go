package hydra_api

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

const hydraUrl string = "https://access.redhat.com/hydra/rest/securitydata/cve/"

type HydraResponse struct {
	CVE          string `json:"name"`
	Severity     string `json:"threat_severity"`
	Statement    string `json:"statement"`
	Upstream_fix string `json:"upstream_fix"`
	Data_Fixed   []struct {
		Product_name   string `json:"product_name"`
		Advisory       string `json:"advisory"`
		CPE            string `json:"cpe"`
		RPM            string `json:"package"`
		Product_impact string `json:"impact,omitempty"`
	} `json:"affected_release"`
	Data_NotFixed []struct {
		Product_name   string `json:"product_name"`
		Fix_State      string `json:"fix_state"`
		CPE            string `json:"cpe"`
		RPM            string `json:"package_name"`
		Product_impact string `json:"impact,omitempty"`
	} `json:"package_state"`
}

func CallHydra(cve_id string) HydraResponse {
	url := hydraUrl + cve_id + ".json"
	// Get request
	resp, err := http.Get(url)
	if err != nil {
		fmt.Println("No response from request")
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body) // response body is []byte

	var result HydraResponse
	if err := json.Unmarshal(body, &result); err != nil { // Parse []byte to the go struct pointer
		fmt.Println("Can not unmarshal JSON")
	}
	return result
}
